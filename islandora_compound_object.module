<?php
// @TODO: Proper compound object form

// In child object manage tab, form to add object to a parent (isPartOf rel? configurable rel)
// In parent object tab, link to add child object
// In parent object tab, link to create child object
// Parent default view: child 1's view, with sibling (prev/next : thumbs) navigation
// Default sort of siblings? configurable?
// Cache children of compound object

function islandora_compound_object_menu() {
  $items = array();
  $items['islandora/object/%islandora_object/manage/compound'] = array(
    'title' => 'Compound',
    'page callback' => 'islandora_compound_object_manage',
    'page arguments' => array(2),
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'islandora_compound_object_access',
    'access arguments' => array(2),
  );
  $items['islandora_compound_object/autocomplete'] = array(
    'page callback' => 'islandora_compound_object_autocomplete_child',
    'access arguments' => array('administer compound relationships'),
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

function islandora_compound_object_permission() {
  return array(
    'administer compound relationships' => array(
      'title' => t('Administer compound object relationships'),
      'description' => t('Add a child to a parent.'),
    ),
  );
}

function islandora_compound_object_access(FedoraObject $object) {
  if (!isset($object)) {
    return FALSE;
  }
  return TRUE;
}

function islandora_compound_object_manage(FedoraObject $object) {
  return drupal_get_form('islandora_compound_object_manage_form', $object);
}

function islandora_compound_object_manage_form($form, $form_state, $object) {
  $form = array();

  // @TODO: Check if is compound object?
  $form['add_children'] = array(
    '#type' => 'fieldset',
    '#title' => t('Add Child Objects'),
    '#description' => t('Add child objects as part of this compound object'),
  );

  $form['add_children']['child'] = array(
    '#type' => 'textfield',
    '#title' => t('Child Object Pid/Label'),
    '#autocomplete_path' => 'islandora_compound_object/autocomplete',
  );

  $form['add_to_parent'] = array(
    '#type' => 'fieldset',
    '#title' => t('Associate with Parent Object'),
  );

  $form['add_to_parent']['parent'] = array(
    '#type' => 'textfield',
    '#title' => t('Parent Object Pid/Label'),
    '#autocomplete_path' => 'islandora_compound_object/autocomplete',
  );

  $form['object'] = array(
    '#type' => 'value',
    '#value' => $object,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  return $form;
}

function islandora_compound_object_manage_form_validate($form, &$form_state) {
  module_load_include('inc', 'islandora', 'includes/utilities');
  $object = $form_state['values']['object'];

  // Child
  if (!empty($form_state['values']['child'])) {
    // Check if valid child pid
    if (!islandora_is_valid_pid($form_state['values']['child'])) {
      form_set_error('child', t('Invalid object supplied.'));
    }

    // Do not allow child of self
    if ($form_state['values']['child'] == $object->id) {
      form_set_error('child', t('An object may not be a child of itself.'));
    }

    // Do not allow repeated child
    $child_object = islandora_object_load($form_state['values']['child']);
    $child_part_of = $child_object->relationships->get('info:fedora/fedora-system:def/relations-external#', 'isPartOf');
    foreach ($child_part_of AS $part) {
      if ($part['object']['value'] == $object->id) {
        form_set_error('child', t('The object is already a parent of the child.'));
      }
    }
  }

  // Parent
  if (!empty($form_state['values']['parent'])) {
    // Check if valid parent pid
    if (!islandora_is_valid_pid($form_state['values']['parent'])) {
      form_set_error('parent', t('Invalid object supplied.'));
    }

    // Do not allow parent of self
    if ($form_state['values']['parent'] == $object->id) {
      form_set_error('parent', t('An object may not be the parent of itself.'));
    }

    // Do not allow repeated parent
    $parent_part_of = $object->relationships->get('info:fedora/fedora-system:def/relations-external#', 'isPartOf');
    foreach ($parent_part_of AS $part) {
      if ($part['object']['value'] == $form_state['values']['parent']) {
        form_set_error('parent', t('The object is already a child of the parent.'));
      }
    }
  }

  if ($form_state['values']['parent'] == $form_state['values']['child']) {
    form_set_error('child', t('An object may not be the parent and child of the same object.'));
    form_set_error('parent');
  }

}

function islandora_compound_object_manage_form_submit($form, &$form_state) {
  $object = $form_state['values']['object'];

  if (!empty($form_state['values']['child'])) {
    $child_object = islandora_object_load($form_state['values']['child']);
    $child_object->relationships->add('info:fedora/fedora-system:def/relations-external#', 'isPartOf', $object->id);
  }

  if (!empty($form_state['values']['parent'])) {
    $object->relationships->add('info:fedora/fedora-system:def/relations-external#', 'isPartOf', $form_state['values']['parent']);
  }

  drupal_set_message(t('Compound relationships added successfully.'));
}

function islandora_compound_object_autocomplete_child($string) {
  $matches = array();

  $islandora_tuque = new IslandoraTuque();

  $results = $islandora_tuque->api->a->findObjects('terms', '*' . $string . '*', 10);

  foreach ($results['results'] AS $result) {
    $matches[$result['pid']] = $result['title'] . ' (' . $result['pid'] . ')';
  }

  drupal_json_output($matches);
}

function islandora_compound_object_theme($existing, $type, $theme, $path) {
  return array(
    'islandora_compound_prev_next' => array(
      'file' => 'theme/theme.inc',
      'variables' => array(
        'parent_label' => NULL,
        'previous_pid' => NULL,
        'next_pid' => NULL,
      ),
    ),
  );
}

function islandora_compound_object_islandora_required_objects(IslandoraTuque $connection) {
  $module_path = drupal_get_path('module', 'islandora_compound_object');

  $compound_content_model = $connection->repository->constructObject('islandora:compoundCModel');
  $compound_content_model->owner = 'fedoraAdmin';
  $compound_content_model->label = 'Islandora Compound Object Content Model';
  $compound_content_model->models = 'fedora-system:ContentModel-3.0';

  $datastream = $compound_content_model->constructDatastream('DS-COMPOSITE-MODEL', 'X');
  $datastream->label = 'DS-COMPOSITE-MODEL';
  $datastream->mimetype = 'text/xml';
  $datastream->setContentFromFile("$module_path/xml/islandora_compound_ds_composite_model.xml", FALSE);
  $compound_content_model->ingestDatastream($datastream);

  $compound_collection = $connection->repository->constructObject('islandora:compound_collection');
  $compound_collection->owner = 'fedoraAdmin';
  $compound_collection->label = 'Compound Collection';
  $compound_collection->models = 'islandora:collectionCModel';
  $compound_collection->relationships->add(FEDORA_RELS_EXT_URI, 'isMemberOfCollection', 'islandora:root');

  $datastream = $compound_collection->constructDatastream('COLLECTION_POLICY', 'X');
  $datastream->label = 'Collection policy';
  $datastream->mimetype = 'text/xml';
  $datastream->setContentFromFile("$module_path/xml/islandora_compound_collection_policy.xml", FALSE);
  $compound_collection->ingestDatastream($datastream);

  $datastream = $compound_collection->constructDatastream('TN', 'M');
  $datastream->label = 'Thumbnail';
  $datastream->mimetype = 'image/png';
  $datastream->setContentFromFile("$module_path/images/folder.png", FALSE);
  $compound_collection->ingestDatastream($datastream);

  return array(
    'islandora_compound_object' => array(
      'title' => 'Islandora compound object',
      'objects' => array(
        $compound_content_model,
        $compound_collection,
      ),
    ),
  );
}

/**
 * Implements hook_islandora_xml_form_builder_forms().
 */
function islandora_compound_object_islandora_xml_form_builder_forms() {
  $module_path = drupal_get_path('module', 'islandora_compound_object');
  return array(
    'Compound Object MODS form' => array(
      'form_file' => "$module_path/xml/islandora_compound_form_mods.xml",
    ),
  );
}

/**
 * Implements hook_islandora_content_model_forms_form_associations().
 */
function islandora_compound_object_islandora_content_model_forms_form_associations() {
  return array(
    'islandora_compound_mods_form' => array(
      'content_model' => 'islandora:compoundCModel',
      'form_name' => 'Compound Object MODS form',
      'dsid' => 'MODS',
      'title_field' => array('titleInfo', 'title'),
      'transform' => 'mods_to_dc.xsl',
      'template' => FALSE,
    ),
  );
}

function islandora_compound_object_islandora_view_object_alter(&$object, &$rendered) {
  $part_of = $object->relationships->get('info:fedora/fedora-system:def/relations-external#', 'isPartOf');

  // This object is part of a compound object
  if (count($part_of)) {
    foreach ($part_of AS $part) {
      $parent_pid = $part['object']['value'];
      $parent = islandora_object_load($parent_pid);

      $siblings = islandora_compound_object_get_parts($parent_pid);

      $current_key = array_search($object->id, $siblings);

      $previous_pid = (isset($siblings[$current_key - 1])) ? $siblings[$current_key - 1] : '';
      $next_pid = (isset($siblings[$current_key + 1])) ? $siblings[$current_key + 1] : '';

      $prev_next = theme('islandora_compound_prev_next',
        array(
          'parent_label' => $parent->label,
          'previous_pid' => $previous_pid,
          'next_pid' => $next_pid
        ));

      $rendered[] = $prev_next;
    }
  }
}

///
//hook_CMODEL_PID_islandora_view_object($object) function islandora_compound_object_islandora

function islandora_compound_object_islandora_compoundCModel_islandora_view_object($object) {
  // Get view of first child
  $children = islandora_compound_object_get_parts($object->id);
  if (!empty($children)) {
    $first_child = islandora_object_load($children[0]);
    return islandora_view_object($first_child);
  }
}

/**
 * Return an array of pids that are part of a compound object.
 *
 * @param $pid
 */
function islandora_compound_object_get_parts($pid) {
  $objects = array();

  $connection = islandora_get_tuque_connection();

  if ($connection) {
    $query = 'select $object from <#ri> where $object <info:fedora/fedora-system:def/relations-external#isPartOf> <info:fedora/' . $pid . '> order by $object';
    $results = $connection->repository->ri->itqlQuery($query);

    foreach ($results AS $result) {
      $objects[] = $result['object']['value'];
    }
  }

  return $objects;
}